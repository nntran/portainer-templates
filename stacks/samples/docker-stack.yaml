version: "3.7"
services:

  hello-world:
    image: ntdtfr/hello-world
    labels:
      - fr.ntdt.environment=${ENVIRONMENT_TYPE:-DEV}
      - fr.ntdt.service.description="A simple service for training"
    networks:
      - traefik-net
    deploy:
      mode: replicated
      replicas: 3
      labels:
        - traefik.enable=true

        # traefik v1.7
        # https://docs.traefik.io/v1.7/configuration/backends/docker/
        # - traefik.docker.network=traefik-net
        # #- traefik.entryPoint=http,https
        # - traefik.port=5000
        # - traefik.backend=hello-world
        # - traefik.frontend.rule=Host:hello-world.${DOMAIN_NAME:-swarm.lan}

        # Traefik v2.x
        # https://docs.traefik.io/providers/docker/
        #- traefik.http.routers.hello-world.rule=Path(`/hello-world`)
        - traefik.http.routers.hello-world.rule=Host(`hello-world.${DOMAIN_NAME:-swarm.lan}`)
        - traefik.http.services.hello-world-service.loadbalancer.server.port=5000
        - traefik.http.middlewares.latency-check.circuitbreaker.expression=LatencyAtQuantileMS(50.0) > 100
      placement:
        constraints:
          - node.role==worker
      update_config:
        parallelism: 2
        delay: 5s
      restart_policy:
        condition: on-failure
        max_attempts: 5
      # resources:
      #   limits:
      #     cpus: "0.2"
      #     memory: 100M
      #   reservations:
      #     cpus: "0.1"
      #     memory: 200M

  pic-viewer:
    image: ntdtfr/pic-viewer
    labels:
      - fr.ntdt.environment=${ENVIRONMENT_TYPE:-DEV}
      - fr.ntdt.service.description="A simple service for training"
    networks:
      - traefik-net
    deploy:
      mode: replicated
      replicas: 3
      labels:
        # - traefik.enable=true

        # traefik v1.7
        # https://docs.traefik.io/v1.7/configuration/backends/docker/
        # - traefik.docker.network=traefik-net
        # # - traefik.entryPoint=http,https
        # - traefik.port=5000
        # - traefik.backend=pic-viewer
        # - traefik.frontend.rule=Host:pic-viewer.${DOMAIN_NAME:-swarm.lan}

        # Traefik v2.x
        # https://docs.traefik.io/providers/docker/
        - traefik.http.routers.pic-viewer.rule=Host(`pic-viewer.${DOMAIN_NAME:-swarm.lan}`)
        - traefik.http.services.pic-viewer-service.loadbalancer.server.port=5000
        - traefik.http.middlewares.latency-check.circuitbreaker.expression=LatencyAtQuantileMS(50.0) > 100
      placement:
        constraints:
          - node.role==worker
      update_config:
        parallelism: 2
        delay: 10s
      restart_policy:
        condition: on-failure
        max_attempts: 5
      # resources:
      #   limits:
      #     cpus: "0.2"
      #     memory: 200M
      #   reservations:
      #     cpus: "0.1"
      #     memory: 100M

  env-viz:
    image: ntdtfr/env-visualizer
    labels:
      - fr.ntdt.environment=${ENVIRONMENT_TYPE:-DEV}
      - fr.ntdt.service.description="A simple service for training"
    configs:
      - source: env.conf
        target: /opt/conf/env.conf
        # uid: "103"
        # gid: "103"
        # mode: 0440
    # ports:
    #   - 5000:5000
    networks:
      - traefik-net
    deploy:
      mode: replicated
      replicas: 3
      labels:
        # Traefik v2.x
        # https://docs.traefik.io/providers/docker/
        #- traefik.http.routers.enviz.rule=Path(`/enviz`)
        - traefik.http.routers.enviz.rule=Host(`enviz.${DOMAIN_NAME:-swarm.lan}`)
        - traefik.http.services.enviz-service.loadbalancer.server.port=5000
      placement:
        constraints:
          - node.role==worker
      update_config:
        parallelism: 2
        delay: 5s
      restart_policy:
        condition: on-failure
        max_attempts: 5

networks:
  traefik-net:
    external: true

configs:
  env.conf:
    #file: ./config/env.conf
    external: true
    # external:
    #   name: env-${ENV:-dev}.conf
